<div class="header">
  <!-- Web banner -->
  <div class="container header-container-outer header-container-web">
    <div class="header-container-inner">
      <div>
        <a href="/">
          <span class="header-title">Inferno Platform Template</span>
        </a>
      </div>
      <%#
      # Uncomment if you would like these links active
      <div class="header-text web-header-text">
        <div>
          <a href="https://example.com">Info Link 1</a> <br>
          <a href="https://example2.com">Ifno Link 2</a>
        </div>
      </div> %>
    </div>
  </div>

  <!-- Mobile banner -->
  <div class="container header-container-outer header-container-mobile">
    <div class="header-container-inner">
      <div>
        <a href="/">
          <span class="header-title-mobile">Inferno Platform Template</span>
        </a>
      </div>
      <%# 
      # Uncomment if you would like to make links active
      <div id="info-container">
        <button class="info-button" onclick="toggleBannerInfo()">
          <span class="info-icon">i</span>
        </button>
        <div id="info-content" class="card header-text mobile-header-text">
          <div>DISCLAIMER TEXT HERE</div>
          <div>
            <a href="https://example.com">Info Link 1</a> <br>
            <a href="https://example2.com">Ifno Link 2</a>
          </div>
        </div>
      </div>
      %>
    </div>
  </div>
</div>

<script type="text/javascript">
  /* Get local storage sessions */
  const getSessions = () => {
    const sessionsString = localStorage.getItem('sessions');
    try {
      const sessions = JSON.parse(sessionsString);
      const sessionsList = sessions && sessions.recent_sessions
        ? sessions.recent_sessions
        : [];
      return sessionsList
        .sort((a, b) => a.date.localeCompare(b.date))
        .reverse();
    } catch {
      return [];
    }
  };

  /* Add session to local storage */
  const addSession = (session) => {
    const sessions = getSessions();
    sessions.push(session);
    localStorage.setItem('sessions', JSON.stringify({ recent_sessions: sessions }));
  };

  /* Update session entry in local storage with current time */
  // Session URL contains session ID and can be used as a unique identifier
  const updateSession = (sessionUrl) => {
    const sessions = getSessions();
    const mostRecentSessionIndex = sessions.findIndex((session) => session.url === sessionUrl);
    const mostRecentSession = sessions.splice(mostRecentSessionIndex, 1)[0];
    mostRecentSession.date = new Date(); // update date
    sessions.unshift(mostRecentSession);
    localStorage.setItem('sessions', JSON.stringify({ recent_sessions: sessions }));
  };

  /* Create session item for local storage */
  const createSessionItem = (title) => {
    const urlSections = location.href.split('?')[0].split('#')[0].split('/'); // remove query and test ID
    const simpleUrl = urlSections.join('/');
    const sessionUrls = getSessions().map((s) => s.url)
    if (sessionUrls.includes(simpleUrl)) {
      updateSession(simpleUrl);
    } else {
      addSession({
        title,
        id: urlSections[urlSections.length - 2], // second to last value
        url: simpleUrl,
        date: new Date(),
      });
    }
  };

  // Watch for title change
  new MutationObserver((mutations) => {
    createSessionItem(mutations[0].target.innerText.replace('Test Session', ''));
  }).observe(
    document.querySelector('title'),
    { subtree: true, characterData: true, childList: true }
  );

  /* Open and close banner info */
  const toggleBannerInfo = () => {
    document.getElementById('info-content').classList.toggle('show');
  }

  // Close the info popover if the user clicks outside of it
  window.onclick = (event) => {
    if (
      !event.target.matches('.info-button')
      && !event.target.matches('.info-icon')
      && event.target.id !== 'info-content'
    ) {
      const popover = document.getElementById('info-content');
      if (popover && popover.classList.contains('show')) {
        popover.classList.remove('show');
      }
    }
  }
</script>

<style>
  .show {
    display: flex !important;
  }

  .banner {
    border-bottom: 5px solid rgba(0, 0, 0, 0.12);
  }

  .card {
    border-radius: 5px;
    border: 1px solid lightgrey;
  }

  .info-button {
    background-color: #2F6BAC;
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    height: 24px;
    width: 24px;
  }

  .info-button:hover {
    background-color: #224e7d;
  }

  .info-icon {
    font-weight: bolder;
    font-size: 16px;
  }

  .header {
    background-color: rgb(248, 249, 250);
  }

  .header-container-outer {
    justify-content: center;
  }

  .header-container-web {
    height: 60px;
    display: flex;
    flex-wrap:wrap;
  }

  .header-container-mobile {
    padding-top:10px;
    height: 50px;
    display: none;
  }

  @media (max-width: 1000px) {
    .header-container-web {
      display: none;
    }
    .header-container-mobile {
      display: flex;
    }
  }

  .header-container-inner {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin: 2px 16px;
  }

  .header-container-inner a,
  .header-container-inner a:visited,
  .header-container-inner a:hover,
  .header-container-inner a:active
  {
    text-decoration: none;
    color: #1d5090;
  }

  .header-title{
    font-size: 2rem;
    font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"
  }

  .header-title-mobile{
    font-size: 2rem;
    font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"
  }

  .header-text {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    color: #2F6BAC;
    font-family: 'Source Sans Pro', sans-serif;
  }
  .disclaimer-text {
    font-family: 'Source Sans Pro', sans-serif;
    background-color:#316DB1;
    color:white;
    font-weight:bold;
    text-align:center;
    font-size: 1rem;
    width:100%;
    padding:.6em;
    white-space:normal;
  }
  .disclaimer-text>.narrow {
    display:none;
  }
  @media (max-width: 1100px) {
    .disclaimer-text>.narrow {
      display: inline;
    }
    .disclaimer-text>.wide {
      display: none;
    }
  }
  .mobile-header-text {
    font-size: 0.9rem;
    font-weight: bolder;
    line-height: 1.5;
    text-align:right;
  }

  .web-header-text {
    font-size: 0.9rem;
    font-weight: bolder;
    line-height: 1.5;
    text-align:right;
  }

  #info-container {
    position: relative;
    display: inline-block;
  }

  /* Info dropdown content (hidden by default) */
  #info-content {
    display: none;
    position: absolute;
    align-items: flex-start;
    background-color: white;
    min-width: 220px;
    max-height: 120px;
    overflow: auto;
    right: 0;
    padding: 16px;
    white-space: pre-line;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 10000; /* needs to be higher than the app header */
  }


.header-title, .header-title-mobile {

    --bs-blue: #0d6efd;
    --bs-indigo: #6610f2;
    --bs-purple: #6f42c1;
    --bs-pink: #d63384;
    --bs-red: #dc3545;
    --bs-orange: #fd7e14;
    --bs-yellow: #ffc107;
    --bs-green: #198754;
    --bs-teal: #20c997;
    --bs-cyan: #0dcaf0;
    --bs-white: #fff;
    --bs-gray: #6c757d;
    --bs-gray-dark: #343a40;
    --bs-gray-100: #f8f9fa;
    --bs-gray-200: #e9ecef;
    --bs-gray-300: #dee2e6;
    --bs-gray-400: #ced4da;
    --bs-gray-500: #adb5bd;
    --bs-gray-600: #6c757d;
    --bs-gray-700: #495057;
    --bs-gray-800: #343a40;
    --bs-gray-900: #212529;
    --bs-primary: #0d6efd;
    --bs-secondary: #6c757d;
    --bs-success: #198754;
    --bs-info: #0dcaf0;
    --bs-warning: #ffc107;
    --bs-danger: #dc3545;
    --bs-light: #f8f9fa;
    --bs-dark: #212529;
    --bs-primary-rgb: 13,110,253;
    --bs-secondary-rgb: 108,117,125;
    --bs-success-rgb: 25,135,84;
    --bs-info-rgb: 13,202,240;
    --bs-warning-rgb: 255,193,7;
    --bs-danger-rgb: 220,53,69;
    --bs-light-rgb: 248,249,250;
    --bs-dark-rgb: 33,37,41;
    --bs-white-rgb: 255,255,255;
    --bs-black-rgb: 0,0,0;
    --bs-body-color-rgb: 33,37,41;
    --bs-body-bg-rgb: 255,255,255;
    --bs-font-sans-serif: system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
    --bs-font-monospace: SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;
    --bs-gradient: linear-gradient(180deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));
    --bs-body-font-family: var(--bs-font-sans-serif);
    --bs-body-font-size: 1rem;
    --bs-body-font-weight: 400;
    --bs-body-line-height: 1.5;
    --bs-body-color: #212529;
    --bs-body-bg: #fff;
    --top-nav-height: 6rem;
    --article-actions-container-height: 2rem;
    --sticky-header-height: calc(var(--top-nav-height) + var(--article-actions-container-height) + 2px);
    --link-color: #036cae;
    --product-card-pinned-bkg: #fcfcfc;
    --product-card-pinned-border-color: #9be;
    --card-header-bkg: #fcfcfc;
    --footer-bkg: #f2f2f2;
    --tag-bkg: #f0f0f0;
    --year-header-color: #555;
    --features-bkg: #f9f9f9;
    --test-kit-header-bkg: #f2f2f2;
    --filter-bar-bkg: #f2f2f2;
    --filter-label-bkg: #f2f2f2;
    font-family: var(--bs-body-font-family);
    font-weight: var(--bs-body-font-weight);
    line-height: var(--bs-body-line-height);
    text-align: var(--bs-body-text-align);
    -webkit-text-size-adjust: 100%;
    -webkit-tap-highlight-color: transparent;
    --bs-bg-opacity: 1;
    white-space: nowrap;
    font-size: 1.8rem;
    color: rgba(0,0,0,.9);
    box-sizing: border-box;
    font-weight: 450;
}


</style>
